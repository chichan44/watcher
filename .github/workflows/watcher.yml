name: Frame Comment Watcher

on:
  workflow_dispatch: {}

concurrency:
  group: watcher
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

env:
  POSTER_REPO: chichan44/framebot
  POSTER_BRANCH: main
  PYTHON_VERSION: "3.10"

jobs:
  run-watcher:
    runs-on: ubuntu-latest

    # Map secrets to env once here; then use env.* everywhere (including if:)
    env:
      FACEBOOK_PAGE_TOKEN: ${{ secrets.FACEBOOK_PAGE_TOKEN }}
      FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      TG_NOTIFY_TOKEN: ${{ secrets.TELEGRAM_NOTIFY_BOT_TOKEN }}
      TG_NOTIFY_CHAT: ${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}

    steps:
      - name: Checkout poster repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.POSTER_REPO }}
          ref: ${{ env.POSTER_BRANCH }}
          token: ${{ secrets.POSTER_REPO_TOKEN }}
          path: poster
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('poster/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r poster/requirements.txt

      - name: Prepare config.yaml
        run: |
          cp poster/config_template.yaml poster/config.yaml
          python - <<'PY'
          import yaml, os
          p = 'poster/config.yaml'
          with open(p,'r',encoding='utf-8') as f:
              c = yaml.safe_load(f)
          c['platforms']['facebook']['page_access_token'] = os.environ['FACEBOOK_PAGE_TOKEN']
          c['platforms']['facebook']['page_id'] = os.environ['FACEBOOK_PAGE_ID']
          c['platforms']['telegram']['bot_token'] = os.environ['TELEGRAM_BOT_TOKEN']
          c['platforms']['telegram']['channel_id'] = os.environ['TELEGRAM_CHANNEL_ID']
          if 'comments' in c and isinstance(c['comments'], dict):
              c['comments']['watcher_enabled'] = True
          with open(p,'w',encoding='utf-8') as f:
              yaml.safe_dump(c, f, sort_keys=False)
          PY

      - name: Configure Git identity
        run: |
          git config --global user.name "watcher-bot"
          git config --global user.email "watcher@users.noreply.github.com"

      - name: Notify start (Telegram, optional)
        if: ${{ env.TG_NOTIFY_TOKEN != '' && env.TG_NOTIFY_CHAT != '' }}
        run: |
          curl -s -X POST \
            "https://api.telegram.org/bot${TG_NOTIFY_TOKEN}/sendMessage" \
            -d chat_id="${TG_NOTIFY_CHAT}" \
            -d parse_mode="Markdown" \
            -d text="Watcher started for \`${{ env.POSTER_REPO }}\` on \`${{ env.POSTER_BRANCH }}\`. Running ~4h loop."

      - name: Watch loop (4 hours total)
        shell: bash
        working-directory: poster
        env:
          FACEBOOK_PAGE_TOKEN: ${{ env.FACEBOOK_PAGE_TOKEN }}
          FACEBOOK_PAGE_ID: ${{ env.FACEBOOK_PAGE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ env.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ env.TELEGRAM_CHANNEL_ID }}
          TG_NOTIFY_TOKEN: ${{ env.TG_NOTIFY_TOKEN }}
          TG_NOTIFY_CHAT: ${{ env.TG_NOTIFY_CHAT }}
        run: |
          set -e
          start_ts=$(date +%s)
          end_ts=$(( start_ts + 4*60*60 ))
          SLEEP_SECONDS=60
          i=0
          while [ "$(date +%s)" -lt "$end_ts" ]; do
            i=$((i+1))
            echo "[$i] Pulling latest poster repo..."
            git pull --ff-only || true

            echo "Running watcher-only..."
            python github_action_poster.py --config config.yaml --watcher-only || code=$?
            code=${code:-0}
            if [ $code -ne 0 ] && [ -n "$TG_NOTIFY_TOKEN" ] && [ -n "$TG_NOTIFY_CHAT" ]; then
              curl -s -X POST \
                "https://api.telegram.org/bot${TG_NOTIFY_TOKEN}/sendMessage" \
                -d chat_id="${TG_NOTIFY_CHAT}" \
                -d parse_mode="Markdown" \
                -d text="Watcher error on iteration *$i* (exit $code) for \`${{ env.POSTER_REPO }}\`."
            fi

            echo "Committing state only on meaningful changes (comments posted)..."
            # Rebase to reduce non-fast-forward conflicts with hourly poster workflow
            git pull --rebase || true
            # Pick state file
            STATE=""
            if [ -f bot_state.json ]; then STATE="bot_state.json"; fi
            if [ -z "$STATE" ] && [ -f data/bot_state.json ]; then STATE="data/bot_state.json"; fi

            MEANINGFUL=0
            if [ -n "$STATE" ]; then
              OUT=$(python - "$STATE" <<'PY'
import json, sys, subprocess
path = sys.argv[1]

def load_head(p):
    try:
        data = subprocess.check_output(["git", "show", f"HEAD:{p}"])
        return json.loads(data.decode("utf-8", errors="ignore"))
    except Exception:
        return None

def load_working(p):
    try:
        with open(p, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return None

def posted_keys(state):
    if not isinstance(state, dict):
        return set()
    posts = state.get("scheduled_posts") or []
    keys = set()
    for p in posts:
        if not isinstance(p, dict):
            continue
        if not p.get("comments_posted"):
            continue
        # Build a stable identity for the post
        ident = p.get("id")
        if not ident:
            ident = p.get("post_id")
        if not ident:
            ident = f"{p.get('schedule_epoch')}-{p.get('post_id')}"
        keys.add(str(ident))
    return keys

head = load_head(path)
working = load_working(path)

# If there's no committed state yet, treat as meaningful to ensure state is created
if head is None and working is not None:
    print("MEANINGFUL=1")
    sys.exit(0)

head_set = posted_keys(head)
working_set = posted_keys(working)

# Only meaningful if working has new posted items compared to head
print("MEANINGFUL=1" if (working_set - head_set) else "MEANINGFUL=0")
PY
)
              echo "$OUT"
              MEANINGFUL=$(echo "$OUT" | grep -o 'MEANINGFUL=[01]' | tail -n1 | cut -d= -f2)
              if [ "$MEANINGFUL" = "1" ]; then
                git add "$STATE" || true
              else
                echo "No meaningful changes (only timestamps/order). Skipping commit."
                git checkout -- "$STATE" || true
              fi
            fi

            if ! git diff --staged --quiet; then
              git commit -m "watcher: update bot state [skip ci]" || true
              # Push; on failure (race), rebase and retry once
              git push origin HEAD:${{ env.POSTER_BRANCH }} || (git pull --rebase || true; git push origin HEAD:${{ env.POSTER_BRANCH }} || true)
            fi

            # Smart sleep: if next scheduled publish is soon, wake just-in-time
            NEXT_SLEEP=$SLEEP_SECONDS
            STATE_FILE=""
            if [ -f bot_state.json ]; then
              STATE_FILE="bot_state.json"
            elif [ -f data/bot_state.json ]; then
              STATE_FILE="data/bot_state.json"
            fi
            if [ -n "$STATE_FILE" ]; then
              NEXT_SLEEP=$(python - "$STATE_FILE" "$SLEEP_SECONDS" <<'PY'
import json, sys, time
path = sys.argv[1]
default_sleep = int(sys.argv[2])
now = int(time.time())
try:
    with open(path, 'r', encoding='utf-8') as f:
        state = json.load(f)
    posts = state.get('scheduled_posts') or []
    upcoming = [int(p.get('schedule_epoch', 0)) for p in posts if not p.get('comments_posted')]
    upcoming = [t for t in upcoming if t > 0]
    if upcoming:
        sched = min(upcoming)
        # Small buffer to ensure post is live before commenting
        target = sched + 5
        dt = target - now
        if dt <= 1:
            print(1)
        elif dt < default_sleep:
            print(dt)
        else:
            print(default_sleep)
    else:
        print(default_sleep)
except Exception:
    print(default_sleep)
PY
)
            fi
            echo "Sleeping ${NEXT_SLEEP}s..."
            sleep "$NEXT_SLEEP"
          done

      - name: Notify stop (Telegram, optional)
        if: ${{ env.TG_NOTIFY_TOKEN != '' && env.TG_NOTIFY_CHAT != '' }}
        run: |
          curl -s -X POST \
            "https://api.telegram.org/bot${TG_NOTIFY_TOKEN}/sendMessage" \
            -d chat_id="${TG_NOTIFY_CHAT}" \
            -d parse_mode="Markdown" \
            -d text="Watcher finished 4h loop for \`${{ env.POSTER_REPO }}\`. Will restart in 2 minutes."

      - name: Wait 2 minutes before restart
        run: sleep 120

      - name: Self-restart workflow
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/watcher.yml/dispatches" \
            -d '{"ref":"'"${{ github.ref_name }}"'"}'
